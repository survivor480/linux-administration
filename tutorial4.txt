strings /usr/bin/ls
This displays the ascii characters that are embedded into ls

ls -l /dev/mem
This is the character image of the main memory

To look into the ascii characters present in the main memory we can use the strings command
sudo strings /dev/mem | less 

To compare 2 files in linux we can use the cmp command. It will compare the two files byte by byte
and display the first instance where they differ.
In case there is no difference, it does not output anything.

Another way to see the difference is to compare their hashes.
We can calculate their hash by the following command

sha256sum /usr/bin/ls ./ls
since they would be having the same hash they are identical

diff command is to only get the difference between two text files

The diff command shows the output as 15c15, this means the line 15 of first file and line 15 of second file are changed. The c
in the middle stands for changed.

In vim, :wq exits from the file.

The basic modes of the VIM editor are:
1) command mode
2) insert mode
3) last line mode

When we enter in a file using vim, we are by default in the command mode.

Any of the line inserted will act as a command for vim

To enter into the insert mode, press lower case i. Now we can edit like any other text editor until esc is pressed

If we press the upper case I, it will start inserting text in the beginning of the line.

If we press lower case a, vim will append the text after the cursor. 

Upper case A appends the text after the current line.

lower case o means to write the text in the new line below the cursor line.

Upper case O means to write the text in the new line above the current line.

To enter into the last line mode, just type in the command : and it will take to the last line of the file.

To save the file without closing, w! is the command to be inserted.

To quit without saving, q! is the command to be inserted.

To find the text matching a certain pattern, we should input the pattern after /, such as /ssh. To go
to the next match we can go with the n command and to go to the prior match we can go by shift N or upper case N 

To search from the end, we can do that by replacing the / with the ?. We can go to the end of the file by pressing g,

To go to the last save version of the file, all we have to do is to pass in the e!.

If we want to cut a line, press dd
To paste the line, press p 

The command "set nu" shows the line numbers in vim code editor
The opposite of "set nu" is "set nonu"
Syntax highlighting is switched on by default. We can switch it off by "syntax off" command. To switch it back on "syntax on"

Now to save our regular settings for vim, we can create a file in the users home directory called .vimrc, 
and write the commands like
set nu
syntax on
This will always execute the commands prior to opening vim.

##########################
## VIM
##########################
 
Modes of operation: Command, Insert, and Last Line Modes.
VIM Config File: ~/.vimrc
 
# Entering the Insert Mode from the Command Mode
i  => insert before the cursor
I  => insert at the beginning of the line
a  => insert after the cursor
A  => insert at the end of the line
o  => insert on the next line
 
# Entering the Last Line Mode from the Command Mode
:
 
# Returning to Command Mode from Insert or Last Line Mode 
ESC
 
# Shortcuts in Last Line Mode
w!  => write/save the file
q!  => quit the file without saving
wq! => save/write and quit
e!  => undo to the last saved version of the file
set nu => set line numbers
set nonu  => unset line numbers
syntax on|off
%s/search_string/replace_string/g
 
# Shortcuts in Command Mode
x   => remove char under the cursor
dd  => cut the current line
5dd => cut 5 lines
ZZ  => save and quit
u   => undo
G   => move to the end of file
$   => move to the end of line
0 or ^  => move to the beginning of file
:n (Ex :10) => move to line n
Shift+v     => select the current line
y           => yank/copy to clipboard
p           => paste after the cursor
P           => paste before the cursor
/string     => search for string forward
?string     => search for string backward
n           => next occurrence
N           => previous occurrence
 
# Opening more files in stacked windows
vim -o file1 file2
 
# Opening more files and highlighting the differences
vim -d file1 file2
Ctrl+w => move between files

Q) How can you save and exit a file from the command mode?
Answer: Press ZZ

To compress a directory into a zip file, we can write the command
sudo tar -czvf etc.tar.gz /etc/

Option -c means create an archive
Option -z tells tar to also compress the file using gzip or gnuzip compression
Option -f allows to specify the filename of the archive

Another compression mechanism is bz2
sudo tar -cjvf etc.tar.bz2 /etc/

We can use the --exclude option to exclude files from the tar interface.

Now to extract a compressed file, we can use the option -x which is short for extract.

To extract a bz2 file, we just need to change z to j.

To create a file with the current date on it,
tar -cjvf etc-$(date + %F).tar.bz2 /etc/

gzip can be used to compress a file. gunzip is used to extract a file.
bzip2, bunzip2 are used for their specific actions.

Every file has a corresponding number called the inode number. The inode number can be viewed by the -i option
in the ls command. The number like 270217 archive.tar.gz is the inode number corresponding to the file.

An association between a file structure and the file name is called a hard link.

Now we can link two files by the ln command.
ln a.txt b.txt
This makes both of their inode number same.

We can find files with more than one links using the file command

find /usr/ -type f -links +1 -ls

synlink is similar to shortcuts in windows.
We can create symlinks with the help of the following command.
ln -s /etc/passwd ./pswd
If we see the output of this, in "ls -l pswd" we will notice that it shows a pointer sign to its original file.

"ps aux" displays all running processes.
If we move a file to another directory, the hard link is not affected but the symlink will be broken.

Q) who > users.txt
ln users.txt u.txt
ln -s u.txt my_users.txt

How many hard links does u.txt have?

Answer: 2

Now we are exploring the passwd file fields one by one.
The first field is the name of the user. The second field indicates that there is a password assigned to the user,
if that field is empty means no need of password for that user. x means a password is assigned and stored in a shadow
file.

The third field is the user id.
The fourth field is the group id.
The fifth field is a comment usually empty.
The sixth field is the home directory of the user.
The seventh field is the default shell of the user.

We can get the complete details of the user details and how to access from "man shadow".

Usually the password format is set to $type$salt$hash
The type chart is as follows:
1) MD5
2a) Blowfish
2y) Eksblowfish
5) SHA-256
6) SHA-512

A salt combined with the password is added to the hashing process to enforce the uniqueness of the output hash. The
salt is randomly generated but is not a secret like the password is.
We can have a look at the shadow file. It is present inside the /etc/shadow

Groups
There are two types of groups that a user can belong to:
1. The primary group: the id is stored in /etc/passwd and the group name in /etc/group
2. Secondary groups: stored in /etc/group
tail -n 3 letc/group
geoclue:x:127:
pulse:x:128:
pulse-access:x:129:
gdm:x:130:
Ixd:x:131:student, john
student:x:1000:

If we use the "groups" command, it will print out all the groups the current user belongs to.

To create a home directory for a user when adding a user

sudo useradd -m u1

To add various options to this command, we can add
sudo useradd -m -d /home/james -c "C++ Developer" -s /bin/bash -G sudo,adm,mail james



















